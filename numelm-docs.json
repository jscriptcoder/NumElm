[
  {
    "name": "NumElm",
    "comment": " The NumPy for Elm.\n\n# Types\n@docs NdArray, Shape, Location, Dtype\n\n# Creating NdArray\n@docs ndarray, vector, matrix, matrix3d\n\n# Getting info from NdArray\n@docs toString, dataToString, shape, size, ndim, length, numel, dtype\n\n# Pre-filled NdArray\n@docs zeros, ones, diagonal, diag, identity, eye, rand\n\n# Getters and Setters\n@docs get, set\n\n# Transforming NdArray\n@docs map, transpose, trans, inverse, inv, pinv, svd\n\n# Arithmetic operations\n@docs add, (.+), subtract, sub, (.-), multiply, mul, (.*), divide, div, (./), power, pow, (.^)\n\n# Root and Logarithm\n@docs sqrt, logBase, log, log2, log10, exp\n\n",
    "aliases": [
      {
        "name": "Location",
        "comment": " Location within the matrix.\n\n    -- nda == [ [1, 2], [3, 4], [5, 6] ]\n    get [1, 0] nda == 3\n\n",
        "args": [],
        "type": "List Int"
      },
      {
        "name": "Shape",
        "comment": " List of dimensions.\n\n    [3, 4]        -- 3×4 matrix\n    [2] == [2, 1] -- 2×1 column vector\n    [1, 4]        -- 1×4 row vector\n    [3, 2, 5]     -- 3×2×5 matrix (3D)\n\n",
        "args": [],
        "type": "List Int"
      }
    ],
    "types": [
      {
        "name": "Dtype",
        "comment": " Data type of the ndarray.\n",
        "args": [],
        "cases": [
          [
            "Int8",
            []
          ],
          [
            "Int16",
            []
          ],
          [
            "Int32",
            []
          ],
          [
            "Float32",
            []
          ],
          [
            "Float64",
            []
          ],
          [
            "Uint8",
            []
          ],
          [
            "Uint16",
            []
          ],
          [
            "Uint32",
            []
          ],
          [
            "Array",
            []
          ]
        ]
      },
      {
        "name": "NdArray",
        "comment": " Represents a multidimensional, homogeneous array of fixed-size items\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": ".*",
        "comment": " Multiply escalar, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        A .* 5\n        -- [ [ 5, 10]\n        -- , [15, 20]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> number -> NumElm.NdArray"
      },
      {
        "name": ".+",
        "comment": " Add escalar, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        A .+ 5\n        -- [ [6, 7]\n        -- , [8, 9]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> number -> NumElm.NdArray"
      },
      {
        "name": ".-",
        "comment": " Substract escalar, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        A .- 5\n        -- [ [-4, -3]\n        -- , [-2, -1]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> number -> NumElm.NdArray"
      },
      {
        "name": "./",
        "comment": " Devide escalar, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        A ./ 5\n        -- [ [1/5, 2/5]\n        -- , [3/5, 4/5]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> Float -> NumElm.NdArray"
      },
      {
        "name": ".^",
        "comment": " NdArray elements raised to power of an escalar, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        A .^ 2\n        -- [ [1,  4]\n        -- , [9, 16]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> number -> NumElm.NdArray"
      },
      {
        "name": "add",
        "comment": " Add arguments, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n        B = matrix Int8\n                   [ [4, 1]\n                   , [5, 3]\n                   ]\n    in\n        add A B\n        -- [ [5, 3]\n        -- , [8, 7]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "dataToString",
        "comment": " Returns the string representation of the internal array.\n\n    let\n        nda = ndarray\n                Int8\n                [3, 2]\n                [1, 2, 3, 4, 5, 6]\n    in\n        dataToString nda\n        --> \"[1,2,3,4,5,6]\"\n",
        "type": "NumElm.NdArray -> String"
      },
      {
        "name": "diag",
        "comment": " Alias for diagonal.\n",
        "type": "NumElm.Dtype -> List number -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "diagonal",
        "comment": " Vector of diagonal elements of list.\n\n    diag Int16 [1, 2, 3]\n    -- [ [1, 0, 0]\n    -- , [0, 2, 0]\n    -- , [0, 0, 3]\n    -- ]\n",
        "type": "NumElm.Dtype -> List number -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "div",
        "comment": " Alias for divide.\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "divide",
        "comment": " Devide arguments, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n        B = matrix Int8\n                   [ [4, 1]\n                   , [5, 3]\n                   ]\n    in\n        divide A B\n        -- [ [1/4,   2]\n        -- , [3/5, 4/3]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "dtype",
        "comment": " Gets the dtype of the ndarray.\n\n    dtype ndarray1 == Int32\n    dtype ndarray2 == Float64\n",
        "type": "NumElm.NdArray -> NumElm.Dtype"
      },
      {
        "name": "exp",
        "comment": " Calculate the exponential of all elements in the NdArray.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        exp A\n        -- [ [ 2.71,  7.38]\n        -- , [20.08, 54.59]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "eye",
        "comment": " Alias for identity.\n",
        "type": "NumElm.Dtype -> Int -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "get",
        "comment": " Gets the value from a specific location.\n\n    let\n        nda = ndarray Int8 [3, 2] [1, 2, 3, 4, 5, 6]\n    in\n        get [1, 0] nda == 3\n\n",
        "type": "NumElm.Location -> NumElm.NdArray -> Maybe.Maybe number"
      },
      {
        "name": "identity",
        "comment": " Return an identity matrix given [size, size].\n\n    identity Int16 3\n    -- [ [1, 0, 0]\n    -- , [0, 1, 0]\n    -- , [0, 0, 1]\n    -- ]\n\n",
        "type": "NumElm.Dtype -> Int -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "inv",
        "comment": " Alias for inverse.\n",
        "type": "NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "inverse",
        "comment": " Compute the (multiplicative) inverse of a matrix.\n\n    let\n        A = matrix Float32\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n    in\n        inverse A\n        -- [ [-2.0,  1.0]\n        -- , [ 1.5, -0.5]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "length",
        "comment": " Gets the number of elements in the ndarray\n\n     -- 2×4×1 matrix\n    numel ndarray == 3\n\n",
        "type": "NumElm.NdArray -> Int"
      },
      {
        "name": "log",
        "comment": " Natural logarithm (in base e), element-wise.\n\n    let\n        A = matrix Float32\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        log A\n        -- [ [   0, 0.69]\n        -- , [1.09, 1.38]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "log10",
        "comment": " Base 10 logarithm, element-wise.\n\n    let\n        A = matrix Float32\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        log10 A\n        -- [ [   0, 0.3]\n        -- , [0.47, 0.6]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "log2",
        "comment": " Base 2 logarithm, element-wise.\n\n    let\n        A = matrix Float32\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        log2 A\n        -- [ [   0, 1]\n        -- , [1.58, 2]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "logBase",
        "comment": " Base \"base\" logarithm, element-wise.\n\n    let\n        A = matrix Float32\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        logBase 3 A\n        -- [ [0, 0.63]\n        -- , [1, 1.26]\n        -- ]\n\n",
        "type": "Float -> NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "map",
        "comment": " Transforms the values of the NdArray with mapping.\n\n    let\n        vec = vector Int8 [1, 2, 3]\n    in\n        map (\\a loc -> a^2) vec\n        --> [1, 4, 9]\n\n",
        "type": "(number1 -> NumElm.Location -> NumElm.NdArray -> number2) -> NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "matrix",
        "comment": " Creates an NdArray from a 2D list.\n\n    -- 2×3 matrix of 32-bit floating point numbers.\n    matrix Float32\n           [ [1, 2, 3]\n           , [4, 5, 6]\n           ]\n\n",
        "type": "NumElm.Dtype -> List (List number) -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "matrix3d",
        "comment": " Creates an NdArray from a 3D list.\n\n    -- 3×2×2 3D matrix of 64-bit floating point numbers.\n    matrix3d Float64\n             [ [ [1, 2]\n               , [3, 4]\n               ]\n             , [ [5, 6]\n               , [7, 8]\n               ]\n             , [ [ 9, 10]\n               , [11, 12]\n               ]\n             ]\n\n",
        "type": "NumElm.Dtype -> List (List (List number)) -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "mul",
        "comment": " Alias for multiply.\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "multiply",
        "comment": " Multiply arguments, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n        B = matrix Int8\n                   [ [4, 1]\n                   , [5, 3]\n                   ]\n    in\n        multiply A B\n        -- [ [ 4,  2]\n        -- , [15, 12]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "ndarray",
        "comment": " Creates an NdArray from a list of numbers.\n\n    -- 3×2 matrix of 8-bit signed integers\n    ndarray\n      Int8\n      [3, 2]\n      [1, 2, 3, 4, 5, 6]\n\n",
        "type": "NumElm.Dtype -> NumElm.Shape -> List number -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "ndim",
        "comment": " Gets the number of dimensions of the ndarray\n\n     -- 2×4×1 matrix\n    ndim ndarray == 3\n\n",
        "type": "NumElm.NdArray -> Int"
      },
      {
        "name": "numel",
        "comment": " Alias for length.\n",
        "type": "NumElm.NdArray -> Int"
      },
      {
        "name": "ones",
        "comment": " Return a new ndarray of given shape and type, filled with ones.\n\n    ones Int8 [2, 4]\n    -- [ [1, 1, 1, 1]\n    -- , [1, 1, 1, 1]\n    -- ]\n",
        "type": "NumElm.Dtype -> NumElm.Shape -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "pinv",
        "comment": " Compute the (Moore-Penrose) pseudo-inverse of a matrix.\n\n    -- TODO\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "pow",
        "comment": " Alias for power.\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "power",
        "comment": " NdArray elements raised to powers from second NdArray, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n        B = matrix Int8\n                   [ [2, 2]\n                   , [3, 4]\n                   ]\n    in\n        divide A B\n        -- [ [ 1,   4]\n        -- , [27, 256]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "rand",
        "comment": " Generates a random ndarray from an uniform distribution over [0, 1).\n\n    rand Float32 [3, 3] 123\n    -- [ [0.24, 0.04, 0.98]\n    -- , [0.35, 0.07, 0.12]\n    -- , [0.36, 0.94, 0.74]\n    -- ]\n\n",
        "type": "NumElm.Dtype -> NumElm.Shape -> Int -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "set",
        "comment": " Sets the value in a specific location\n\n    let\n        nda = ndarray Int8 [3, 2] [1, 2, 3, 4, 5, 6]\n        -- [ [1, 2]\n        -- , [3, 4]\n        -- , [5, 6]\n        -- ]\n    in\n        set 8 [1, 0] nda\n        -- [ [1, 2]\n        -- , [8, 4]\n        -- , [5, 6]\n        -- ]\n\n",
        "type": "number -> NumElm.Location -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "shape",
        "comment": " Gets the shape of the ndarray.\n\n     -- 2×4 matrix\n    shape ndarray1 == [2, 4]\n\n    -- 3×2×2 3D matrix\n    shape ndarray2 == [3, 2, 2]\n\n",
        "type": "NumElm.NdArray -> NumElm.Shape"
      },
      {
        "name": "size",
        "comment": " Alias for shape.\n",
        "type": "NumElm.NdArray -> NumElm.Shape"
      },
      {
        "name": "sqrt",
        "comment": " Return the positive square-root of an array, element-wise.\n\n    let\n        A = matrix Float32\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n    in\n        sqrt A\n        -- [ [   1, 1.41]\n        -- , [1.73,    2]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "sub",
        "comment": " Alias for subtract.\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "subtract",
        "comment": " Substract arguments, element-wise.\n\n    let\n        A = matrix Int8\n                   [ [1, 2]\n                   , [3, 4]\n                   ]\n\n        B = matrix Int8\n                   [ [4, 1]\n                   , [5, 3]\n                   ]\n    in\n        subtract A B\n        -- [ [-3, 1]\n        -- , [-2, 1]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "svd",
        "comment": " Singular Value Decomposition.\n\n    -- TODO\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "toString",
        "comment": " Returns the string representation of the ndarray.\n\n    let\n        nda = ndarray\n                Int8\n                [3, 2]\n                [1, 2, 3, 4, 5, 6]\n    in\n        toString nda\n        --> NdArray[length=6,shape=3×2,dtype=Int8]\n",
        "type": "NumElm.NdArray -> String"
      },
      {
        "name": "trans",
        "comment": " Alias for transpose.\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "transpose",
        "comment": " Transposes the NdArray. Permute the dimensions, and only the first two.\n\n    let\n        A = matrix Float32\n                   [ [1, 2, 3]\n                   , [4, 5, 6]\n                   ]\n    in\n        transpose A\n        -- [ [1, 4]\n        -- , [2, 5]\n        -- , [3, 6]\n        -- ]\n\n",
        "type": "NumElm.NdArray -> NumElm.NdArray"
      },
      {
        "name": "vector",
        "comment": " Creates an NdArray from a 1D list.\n\n    -- 6×1 column vector of 16-bit signed integers.\n    vector\n      Int16\n      [ 1, 2, 3, 4, 5, 6 ]\n\n",
        "type": "NumElm.Dtype -> List number -> Result.Result String NumElm.NdArray"
      },
      {
        "name": "zeros",
        "comment": " Returns a new ndarray of given shape and type, filled with zeros.\n\n    zeros Int8 [3, 2]\n    -- [ [0, 0]\n    -- , [0, 0]\n    -- , [0, 0]\n    -- ]\n\n",
        "type": "NumElm.Dtype -> NumElm.Shape -> Result.Result String NumElm.NdArray"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]